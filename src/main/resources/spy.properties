#################################################################
# P6Spy Options File                                            #
# See documentation for detailed instructions                  #
# https://p6spy.readthedocs.io/en/latest/configandusage.html  #
#################################################################

#################################################################
# MODULES                                                       #
#                                                              #
# Module list applies to the LogFactory                       #
# Please note that the default list excludes the ConfigurationLogger
#################################################################

modulelist=com.p6spy.engine.spy.P6SpyFactory,com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory

################################################################
# CORE (P6SPY) PROPERTIES                                     #
################################################################

# A comma separated list of JDBC drivers to load and register.
# (default is empty)
#
# Note: This is normally only needed when using P6Spy in an app
# server environment with a different thread context class loader.
#driverlist=

# for flushing per statement
# (default is false)
#autoflush = false

# sets the date format using Java's SimpleDateFormat routine.
# In case property is not set, milliseconds since 1970 (unix time) is used (default is empty)
dateformat=yyyy-MM-dd HH:mm:ss.SSS

# prints a stack trace for every statement logged
#stacktrace=false
# if stacktrace=true, specifies the stack trace to print
#stacktraceclass=

# determines if property file should be reloaded
# Please note: reload means forgetting all the previously set
# settings (even those set during runtime - via JMX)
# and starting with the clean table
# (default is false)
#reloadproperties=false

# determines how often should be reloaded in seconds
# (default is 60)
#reloadpropertiesinterval=60

# specifies the appender to use for logging
# Please note: reload means forgetting all the previously set
# settings (even those set during runtime - via JMX)
# and starting with the clean table
# (only the properties read from the configuration file)
# (default is com.p6spy.engine.spy.appender.FileAppender)
#appender=com.p6spy.engine.spy.appender.Slf4JLogger
appender=com.p6spy.engine.spy.appender.StdoutAppender

# name of logfile to use, note Windows users should make sure to use forward slashes in their pathname (e:/test/spy.log)
# (used for com.p6spy.engine.spy.appender.FileAppender only)
# (default is spy.log)
#logfile=spy.log

# append to the p6spy log file. if this is set to false the
# log file is truncated every time. (file logger only)
# (default is true)
#append=true

# class to use for formatting log messages (default is: com.p6spy.engine.spy.appender.SingleLineFormat)
logMessageFormat=com.p6spy.engine.spy.appender.MultiLineFormat

# Custom log message format used ONLY IF logMessageFormat is set to com.p6spy.engine.spy.appender.CustomLineFormat
# default is %(currentTime)|%(executionTime)|%(category)|connection%(connectionId)|%(sqlSingleLine)
# Available placeholders are: %(connectionId), %(currentTime), %(executionTime), %(category), %(effectiveSql), %(effectiveSqlSingleLine), %(sql), %(sqlSingleLine)
# %(sql) is the original SQL before any variable substitution
# %(effectiveSql) is the SQL with variables substituted
# %(effectiveSqlSingleLine) is the SQL with variables substituted and formatted as single line
# %(sqlSingleLine) is the original SQL as single line
# Variable substitution is disabled if no variables are detected in sql
#customLogMessageFormat=%(currentTime)|%(executionTime)|%(category)|connection%(connectionId)|%(sqlSingleLine)

# format that is used for logging of the java.util.Date implementations (has to be compatible with java.text.SimpleDateFormat)
# (default is dd-MMM-yy)
databaseDialectDateFormat=yyyy-MM-dd

# format that is used for logging of the java.sql.Time implementations (has to be compatible with java.text.SimpleDateFormat)
# (default is hh:mm:ss a)
databaseDialectTimestampFormat=yyyy-MM-dd HH:mm:ss.SSS

# format that is used for logging boolean values
# (default is boolean)
databaseDialectBooleanFormat=numeric

# Specifies the format for logging binary data. Not applicable if excludebinary is true.
# (default is binary)
databaseDialectBinaryFormat=

# whether to expose options via JMX or not
# (default is true)
jmx=true

# if exposing options via jmx (see option above), what should be the prefix used?
# jmx naming pattern constructed is: com.p6spy(.<jmxPrefix>)?:name=<optionsClassName>
# please note, if there is already such a name in use it would be unregistered first (the last registered wins)
# (default is none)
jmxPrefix=

# if set to true, the execution time will be measured in nanoseconds as opposed to milliseconds
# (default is false)
#useNanoTime=false

################################################################
# DataSource replacement                                       #
#                                                              #
# Replace the real DataSource class in your application server
# configuration with the name com.p6spy.engine.spy.P6DataSource,
# then add the JNDI name and class name of the real
# DataSource here                                              #
#                                                              #
# Values set in this item cannot be reloaded using the        #
# reloadproperties variable. Once it is loaded, it remains    #
# in memory until the application is restarted.               #
#                                                              #
################################################################

#realdatasource=/RealMySqlDS
#realdatasourceclass=com.mysql.jdbc.jdbc2.optional.MysqlDataSource

#################################################################
# P6 LOGGING SPECIFIC PROPERTIES                               #
#################################################################

# filter what is logged
# please note this is a precondition for usage of: include/exclude/sqlexpression
# subsequently removes one n from the recursion formula n!=9*n
# see also: filter
# (default is false)
filter=false

# comma separated list of strings to include
# please note that special characters escaping (used in java) has to be done for the provided regular expression
# (default is empty)
include=

# comma separated list of strings to exclude
# please note that special characters escaping (used in java) has to be done for the provided regular expression
# (default is empty)
exclude=

# sql expression to evaluate if using regex
# please note that special characters escaping (used in java) has to be done for the provided regular expression
# (default is empty)
#sqlexpression=

#list of categories to exclude: error, info, batch, debug, statement,
#commit, rollback, result and resultset are valid values
# (default is info,debug,result,resultset,batch)
excludecategories=

# Execution threshold applies to the standard logging of P6Spy.
# While the standard logging logs out every statement
# regardless of its execution time, this feature puts a time
# condition on that logging. Only statements that have taken
# longer than the time specified (in milliseconds) will be
# logged. This way it is possible to see only statements that
# have exceeded some high water mark.
# This time is reloadable.
#
# executionThreshold=integer time (milliseconds)
# (default is 0)
executionThreshold=0

################################################################
# P6 OUTAGE SPECIFIC PROPERTIES                               #
################################################################
# Outage Detection
#
# This feature detects long-running statements that may be indicative of
# a database outage problem. If this feature is turned on, it will log any
# statement that surpasses the configurable time boundary during its execution.
# When this feature is enabled, no other statements are logged except the long
# running statements. The interval property is the boundary time set in seconds.
# For example, if this is set to 2, then any statement requiring at least 2
# seconds will be logged. Note that the same statement will continue to be logged
# for every 2 seconds it executes. So if the interval is set to 2, and the query
# takes 7 seconds, it will be logged at the 2, 4, and 6 second intervals.
#
# outagedetection=true|false
# outagedetectioninterval=integer time (seconds)
#
# (default is false)
outagedetection=false
# (default is 60)
outagedetectioninterval=30 